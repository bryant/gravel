# example

int32 add(a int32, b int32):
    c int32 = a + b
    return c

i32 fib_naive_recur(nth i32):
    if nth > 0:
        return fib_naive_recur(nth-1) + fib_naive_recur(nth-2)
    return 1

i32 fib_naive_iter(nth i32):
    if nth <= 0:
        return 1

    cur i32, next i32 = 1, 1
    i i32 from 0 to nth:
        cur, next = next, cur + next
    return cur

i32 fib_log_n(nth i32):
    if nth <= 0:
        return 1

    [[i32]] mat_mult(a [[i32]], b [[i32]]):
        i32 cell(row i32, col i32):
            return a[0][col]*b[row][0] + a[1][col]*b[row][1]
        return [[cell(0, 0), cell(0, 1)],
                [cell(1, 0), cell(1, 1)]]

    [[i32]] mat_exp(m [[i32]], k i32):
        # raise a matrix m to the k-th power in O(log k) operations using
        # y exponentiation.
        rv [[i32]] = [[1, 0], [0, 1]]
        while k > 0:
            if k & 1 == 0:
                rv *= m
            m *= m
            k >>= 1
        return rv

    fibmatrix [[i32]] = [[1, 1], [1, 0]]
    return mat_exp(fibmatrix, nth)[0][1]

# things of note:
# - no for loops
# - no pointers
